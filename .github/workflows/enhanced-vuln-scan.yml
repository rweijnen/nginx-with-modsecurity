name: Enhanced Vulnerability Scan and Auto-Rebuild

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if vulnerabilities were recently scanned'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '30 6 * * *'

permissions:
  contents: write
  security-events: write
  actions: write

env:
  REGISTRY: index.docker.io
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}

jobs:
  vulnerability-scan:
    runs-on: ubuntu-latest
    environment: DEFAULT
    outputs:
      has_critical_vulns: ${{ steps.analyze-results.outputs.has_critical_vulns }}
      rebuild_needed: ${{ steps.analyze-results.outputs.rebuild_needed }}
      vuln_summary: ${{ steps.analyze-results.outputs.vuln_summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: |
          echo "Pulling latest image: ${{ env.IMAGE_NAME }}:latest"
          docker pull ${{ env.IMAGE_NAME }}:latest

      - name: Analyze for critical and high CVEs with Docker Scout
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          image: ${{ env.IMAGE_NAME }}:latest
          command: cves
          sarif-file: sarif.output.json
          summary: true
          only-severities: critical,high
          exit-code: false  # Don't fail the workflow on vulnerabilities

      - name: Analyze vulnerability results
        id: analyze-results
        run: |
          # Check if SARIF file exists and has content
          if [[ ! -f "sarif.output.json" ]]; then
            echo "No SARIF file generated"
            echo "has_critical_vulns=false" >> $GITHUB_OUTPUT
            echo "rebuild_needed=false" >> $GITHUB_OUTPUT
            echo "vuln_summary=No vulnerabilities detected" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count critical and high vulnerabilities
          CRITICAL_COUNT=$(jq '.runs[0].results | map(select(.properties.cvss_severity == "critical")) | length' sarif.output.json 2>/dev/null || echo "0")
          HIGH_COUNT=$(jq '.runs[0].results | map(select(.properties.cvss_severity == "high")) | length' sarif.output.json 2>/dev/null || echo "0")
          TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT))

          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          echo "Total critical/high vulnerabilities: $TOTAL_VULNS"

          # Create summary
          VULN_SUMMARY="Found $TOTAL_VULNS critical/high vulnerabilities (Critical: $CRITICAL_COUNT, High: $HIGH_COUNT)"
          echo "vuln_summary=$VULN_SUMMARY" >> $GITHUB_OUTPUT

          if [[ $TOTAL_VULNS -gt 0 ]]; then
            echo "has_critical_vulns=true" >> $GITHUB_OUTPUT
            
            # Check if we should rebuild (avoid loops)
            SHOULD_REBUILD="true"
            
            # Check recent commits for vulnerability-related rebuilds
            RECENT_VULN_COMMIT=$(git log --oneline -10 | grep -i "vulnerability\|cve\|security" | head -1 || echo "")
            if [[ -n "$RECENT_VULN_COMMIT" ]] && [[ "${{ github.event.inputs.force_rebuild }}" != "true" ]]; then
              # Check if the commit was within last 24 hours
              COMMIT_AGE_HOURS=$(git log -1 --format="%cr" --grep="vulnerability\|cve\|security" | grep -oE '[0-9]+' | head -1 || echo "999")
              if [[ "$COMMIT_AGE_HOURS" -lt "24" ]]; then
                echo "Recent vulnerability-related rebuild found within 24 hours. Skipping rebuild to prevent loops."
                SHOULD_REBUILD="false"
              fi
            fi
            
            echo "rebuild_needed=$SHOULD_REBUILD" >> $GITHUB_OUTPUT
          else
            echo "has_critical_vulns=false" >> $GITHUB_OUTPUT
            echo "rebuild_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload SARIF result to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.output.json

      - name: Upload SARIF file as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-scan-sarif-${{ github.run_number }}
          path: sarif.output.json

      - name: Create vulnerability report
        if: steps.analyze-results.outputs.has_critical_vulns == 'true'
        run: |
          echo "## ðŸš¨ Vulnerability Scan Results" > vulnerability-report.md
          echo "" >> vulnerability-report.md
          echo "**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> vulnerability-report.md
          echo "**Image:** ${{ env.IMAGE_NAME }}:latest" >> vulnerability-report.md
          echo "**Summary:** ${{ steps.analyze-results.outputs.vuln_summary }}" >> vulnerability-report.md
          echo "" >> vulnerability-report.md
          echo "**Action Required:** ${{ steps.analyze-results.outputs.rebuild_needed == 'true' && 'Triggering automatic rebuild' || 'Rebuild skipped (recent rebuild detected)' }}" >> vulnerability-report.md
          
          # Add detailed vulnerability list if available
          if [[ -f "sarif.output.json" ]]; then
            echo "" >> vulnerability-report.md
            echo "### Detailed Vulnerabilities" >> vulnerability-report.md
            jq -r '.runs[0].results[] | "- **\(.ruleId // "Unknown")**: \(.message.text // "No description")"' sarif.output.json >> vulnerability-report.md 2>/dev/null || echo "Error parsing detailed vulnerabilities" >> vulnerability-report.md
          fi

      - name: Upload vulnerability report
        if: steps.analyze-results.outputs.has_critical_vulns == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ github.run_number }}
          path: vulnerability-report.md

  trigger-rebuild:
    needs: vulnerability-scan
    if: needs.vulnerability-scan.outputs.rebuild_needed == 'true'
    runs-on: ubuntu-latest
    environment: DEFAULT
    
    steps:
      - name: Trigger vulnerability-based rebuild
        run: |
          echo "Triggering rebuild due to vulnerabilities: ${{ needs.vulnerability-scan.outputs.vuln_summary }}"
          gh workflow run test-new-build.yml \
            -f force_build=true \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create issue for high-priority vulnerabilities
        if: contains(needs.vulnerability-scan.outputs.vuln_summary, 'Critical:')
        run: |
          ISSUE_TITLE="ðŸš¨ Critical vulnerabilities detected in Docker image"
          ISSUE_BODY="**Vulnerability Summary:** ${{ needs.vulnerability-scan.outputs.vuln_summary }}

**Image:** ${{ env.IMAGE_NAME }}:latest
**Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
**Action Taken:** Automatic rebuild triggered

**Next Steps:**
- Monitor the rebuild progress in [Actions](https://github.com/${{ github.repository }}/actions)
- Review the vulnerability report in the workflow artifacts
- Consider updating base images or dependencies if rebuild doesn't resolve issues

**Workflow Run:** [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"

          gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "security,vulnerability,high-priority" \
            --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}