name: Build and Push Docker Image v2

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - docker-hub-description.md
      - VERSIONS.txt
      - .github/workflows/test*.yml
  schedule:
    - cron: '2 22 * * *'  # Runs every day at midnight UTC (adjust as necessary)
      
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: write
      attestations: write
    environment: DEFAULT     
    env:
      REGISTRY: index.docker.io
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Fetch Latest Alpine Version
        id: fetch_alpine_version
        run: |
          docker pull alpine:latest
          ALPINE_VERSION=$(docker run --rm alpine:latest cat /etc/alpine-release)
          echo "Latest Alpine version: $ALPINE_VERSION"
          echo "LATEST_ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_ENV

      - name: Fetch Latest NGINX Version
        id: fetch_nginx_version
        run: |
          LATEST_NGINX_VERSION=$(wget -qO- http://nginx.org/en/download.html | grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Latest NGINX version: $LATEST_NGINX_VERSION"
          echo "LATEST_NGINX_VERSION=$LATEST_NGINX_VERSION" >> $GITHUB_ENV
          
      - name: Fetch Latest ModSecurity Version
        id: fetch_modsecurity_version
        run: |
          LATEST_MODSECURITY_VERSION=$( curl -s https://api.github.com/repositories/1320594/releases | jq -r 'map(select(.tag_name | startswith("v3."))) | .[0].tag_name')
          echo "Latest ModSecurity Release: $LATEST_MODSECURITY_VERSION" 
          echo "LATEST_MODSECURITY_VERSION=$LATEST_MODSECURITY_VERSION" >> $GITHUB_ENV

      - name: Fetch Latest OWASP Core Rule Set Version
        id: fetch_owasp_ruleset_version
        run: |
          LATEST_OWASP_RULESET_VERSION=$(curl -s https://api.github.com/repos/coreruleset/coreruleset/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "Latest OWASP Core Ruleset Release: $LATEST_OWASP_RULESET_VERSION"
          echo "LATEST_OWASP_RULESET_VERSION=$LATEST_OWASP_RULESET_VERSION" >> $GITHUB_ENV
            
      - name: Compare versions
        id: compare_versions
        run: |
          source VERSIONS.txt
          
          echo "Last used versions (from VERSIONS.txt):"
          echo "CURRENT_ALPINE_VERSION='${CURRENT_ALPINE_VERSION}'"
          echo "CURRENT_NGINX_VERSION='${CURRENT_NGINX_VERSION}'"
          echo "CURRENT_MODSECURITY_VERSION='${CURRENT_MODSECURITY_VERSION}'"
          echo "CURRENT_OWASP_RULESET_VERSION='${CURRENT_OWASP_RULESET_VERSION}'"
          
          echo "Latest available versions:"
          echo "LATEST_ALPINE_VERSION='${{ env.LATEST_ALPINE_VERSION }}'"
          echo "LATEST_NGINX_VERSION='${{ env.LATEST_NGINX_VERSION }}'"
          echo "LATEST_MODSECURITY_VERSION='${{ env.LATEST_MODSECURITY_VERSION }}'"
          echo "LATEST_OWASP_RULESET_VERSION='${{ env.LATEST_OWASP_RULESET_VERSION }}'"
      
          if [[ "${{ env.LATEST_NGINX_VERSION }}" == "$CURRENT_NGINX_VERSION" ]] && \
               [[ "${{ env.LATEST_MODSECURITY_VERSION }}" == "$CURRENT_MODSECURITY_VERSION" ]] && \
               [[ "${{ env.LATEST_OWASP_RULESET_VERSION }}" == "$CURRENT_OWASP_RULESET_VERSION" ]] && \
               [[ "${{ env.LATEST_GEOIP2_VERSION }}" == "$CURRENT_GEOIP2_VERSION" ]] && \
               [[ "${{ env.LATEST_ALPINE_VERSION }}" == "$CURRENT_ALPINE_VERSION" ]]; then
             echo "No updates found. Exiting."
             echo "needs_build=false" >> $GITHUB_ENV
          else
            echo "New versions found. Proceeding with the build."
            echo "needs_build=true" >> $GITHUB_ENV
          fi      

      - name: Extract metadata
        if: env.needs_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: latest
          
      - name: Build and push Docker image
        if: env.needs_build == 'true'
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NGINX_VERSION=${{ env.LATEST_NGINX_VERSION }}
          sbom: true
          
      - name: Generate SBOM
        if: env.needs_build == 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: 'cyclonedx-json'
          output-file: 'sbom.cyclonedx.json'
                 
      - name: Attest SBOM
        if: env.needs_build == 'true'
        uses: actions/attest-sbom@v1
        with:
          subject-name: index.docker.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: 'sbom.cyclonedx.json'
          push-to-registry: true
          
      - name: Update versions file and README.md
        if: env.needs_build == 'true' && success() && steps.compare_versions.outcome == 'success'
        run: |
          # Update VERSIONS.txt
          echo "CURRENT_ALPINE_VERSION=${{ env.LATEST_ALPINE_VERSION }}" > VERSIONS.txt
          echo "CURRENT_NGINX_VERSION=${{ env.LATEST_NGINX_VERSION }}" >> VERSIONS.txt
          echo "CURRENT_MODSECURITY_VERSION=${{ env.LATEST_MODSECURITY_VERSION }}" >> VERSIONS.txt
          echo "CURRENT_OWASP_RULESET_VERSION=${{ env.LATEST_OWASP_RULESET_VERSION }}" >> VERSIONS.txt
      
          # Update README.md with the new versions
          sed -i "s/<!--ALPINE_VERSION-->.*<!--ALPINE_VERSION-->/<!--ALPINE_VERSION-->${{ env.LATEST_ALPINE_VERSION }}<!--ALPINE_VERSION-->/g" README.md
          sed -i "s/<!--NGINX_VERSION-->.*<!--NGINX_VERSION-->/<!--NGINX_VERSION-->${{ env.LATEST_NGINX_VERSION }}<!--NGINX_VERSION-->/g" README.md
          sed -i "s/<!--MODSECURITY_VERSION-->.*<!--MODSECURITY_VERSION-->/<!--MODSECURITY_VERSION-->${{ env.LATEST_MODSECURITY_VERSION }}<!--MODSECURITY_VERSION-->/g" README.md
          sed -i "s/<!--OWASP_RULESET_VERSION-->.*<!--OWASP_RULESET_VERSION-->/<!--OWASP_RULESET_VERSION-->${{ env.LATEST_OWASP_RULESET_VERSION }}<!--OWASP_RULESET_VERSION-->/g" README.md
      
          # Configure Git
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          git pull origin main

          # Add files and commit the changes
          git add VERSIONS.txt README.md
          git commit -m "Update versions and README.md: NGINX ${{ env.LATEST_NGINX_VERSION }}, ModSecurity ${{ env.LATEST_MODSECURITY_VERSION }}, OWASP CRS ${{ env.LATEST_OWASP_RULESET_VERSION }}"

          # Push the changes
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Replace Docker Hub Description Versions with Latest Available
        if: env.needs_build == 'true' && success()
        run: |
          # Replace placeholders in docker-hub-description.md with the latest available versions
          sed -i "s/<!--BUILD_DATE-->.*<!--BUILD_DATE-->/<!--BUILD_DATE-->$(date +'%Y-%m-%d')<!--BUILD_DATE-->/g" docker-hub-description.md
          sed -i "s/<!--ALPINE_VERSION-->.*<!--ALPINE_VERSION-->/<!--ALPINE_VERSION-->${{ env.LATEST_ALPINE_VERSION }}<!--ALPINE_VERSION-->/g" docker-hub-description.md
          sed -i "s/<!--NGINX_VERSION-->.*<!--NGINX_VERSION-->/<!--NGINX_VERSION-->${{ env.LATEST_NGINX_VERSION }}<!--NGINX_VERSION-->/g" docker-hub-description.md
          sed -i "s/<!--MODSECURITY_VERSION-->.*<!--MODSECURITY_VERSION-->/<!--MODSECURITY_VERSION-->${{ env.LATEST_MODSECURITY_VERSION }}<!--MODSECURITY_VERSION-->/g" docker-hub-description.md
          sed -i "s/<!--OWASP_RULESET_VERSION-->.*<!--OWASP_RULESET_VERSION-->/<!--OWASP_RULESET_VERSION-->${{ env.LATEST_OWASP_RULESET_VERSION }}<!--OWASP_RULESET_VERSION-->/g" docker-hub-description.md
      
      - name: Update Docker Hub Description
        #if: env.needs_build == 'true' && success()
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_RWD_PAT }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: docker-hub-description.md
          
      - name: Skip build and push
        if: env.needs_build == 'false'
        run: echo "Skipping build and push, no updates found."
