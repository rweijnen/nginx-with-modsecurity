name: Build and Push Docker Image v2

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no version changes'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - main
    paths-ignore:
      - README.md
      - docker-hub-description.md
      - VERSIONS.txt
      - .github/workflows/test*.yml
  schedule:
    - cron: '2 22 * * *'  # Runs every day at midnight UTC (adjust as necessary)
      
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: write
      attestations: write
      security-events: write
    environment: DEFAULT     
    env:
      REGISTRY: index.docker.io
      IMAGE_NAME: ${{ vars.IMAGE_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate build timestamp
        id: timestamp
        run: echo "BUILD_DATETIME=$(date -u +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Fetch Latest Alpine Version
        id: fetch_alpine_version
        run: |
          docker pull alpine:latest
          ALPINE_VERSION=$(docker run --rm alpine:latest cat /etc/alpine-release)
          echo "Latest Alpine version: $ALPINE_VERSION"
          echo "LATEST_ALPINE_VERSION=$ALPINE_VERSION" >> $GITHUB_ENV

      - name: Fetch Latest NGINX Version
        id: fetch_nginx_version
        run: |
          LATEST_NGINX_VERSION=$(wget -qO- http://nginx.org/en/download.html | grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Latest NGINX version: $LATEST_NGINX_VERSION"
          echo "LATEST_NGINX_VERSION=$LATEST_NGINX_VERSION" >> $GITHUB_ENV
          
      - name: Fetch Latest ModSecurity Version
        id: fetch_modsecurity_version
        run: |
          set -e
          echo "Fetching ModSecurity releases..."
          
          # Install jq if not available (shouldn't be needed on ubuntu-latest but just in case)
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update -qq
            sudo apt-get install -y jq
          fi
          
          # Fetch releases with retry logic
          RELEASES_JSON=""
          for i in {1..3}; do
            echo "Attempt $i to fetch releases..."
            set +e  # Temporarily disable exit on error for curl
            RELEASES_JSON=$(curl -s --fail --max-time 30 https://api.github.com/repositories/1320594/releases)
            CURL_EXIT_CODE=$?
            set -e  # Re-enable exit on error
            if [ $CURL_EXIT_CODE -eq 0 ] && [ -n "$RELEASES_JSON" ]; then
              echo "Successfully fetched releases data"
              break
            fi
            echo "Attempt $i failed (exit code: $CURL_EXIT_CODE), retrying in 5 seconds..."
            sleep 5
          done
          
          # Check if we got valid JSON
          if [ -z "$RELEASES_JSON" ] || ! echo "$RELEASES_JSON" | jq empty 2>/dev/null; then
            echo "Error: Failed to fetch valid releases JSON"
            exit 1
          fi
          
          # Extract latest v3 version with fallback
          LATEST_MODSECURITY_VERSION=$(echo "$RELEASES_JSON" | jq -r 'map(select(.tag_name | startswith("v3."))) | .[0].tag_name // empty')
          
          # Validate we got a version
          if [ -z "$LATEST_MODSECURITY_VERSION" ] || [ "$LATEST_MODSECURITY_VERSION" = "null" ]; then
            echo "Error: No v3 ModSecurity releases found"
            echo "Available releases:"
            echo "$RELEASES_JSON" | jq -r '.[].tag_name' | head -10
            exit 1
          fi
          
          echo "Latest ModSecurity Release: $LATEST_MODSECURITY_VERSION"
          echo "LATEST_MODSECURITY_VERSION=$LATEST_MODSECURITY_VERSION" >> $GITHUB_ENV
          
          # Verify the version format
          if [[ ! "$LATEST_MODSECURITY_VERSION" =~ ^v3\.[0-9]+\.[0-9]+$ ]]; then
            echo "Warning: Version format looks unexpected: $LATEST_MODSECURITY_VERSION"
          fi

      - name: Fetch Latest OWASP Core Rule Set Version
        id: fetch_owasp_ruleset_version
        run: |
          LATEST_OWASP_RULESET_VERSION=$(curl -s https://api.github.com/repos/coreruleset/coreruleset/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "Latest OWASP Core Ruleset Release: $LATEST_OWASP_RULESET_VERSION"
          echo "LATEST_OWASP_RULESET_VERSION=$LATEST_OWASP_RULESET_VERSION" >> $GITHUB_ENV
            
      - name: Compare versions
        id: compare_versions
        run: |
          # Check for manual force build
          if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
            echo "Manual force build requested. Proceeding with build."
            echo "needs_build=true" >> $GITHUB_ENV
            echo "build_reason=Manual force build" >> $GITHUB_ENV
            exit 0
          fi

          # Check for manual workflow dispatch (without force flag)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.force_build }}" != "true" ]]; then
            echo "Manual trigger detected but force_build not set. Proceeding with normal version comparison."
          fi

          source VERSIONS.txt
          
          echo "Last used versions (from VERSIONS.txt):"
          echo "CURRENT_ALPINE_VERSION='${CURRENT_ALPINE_VERSION}'"
          echo "CURRENT_NGINX_VERSION='${CURRENT_NGINX_VERSION}'"
          echo "CURRENT_MODSECURITY_VERSION='${CURRENT_MODSECURITY_VERSION}'"
          echo "CURRENT_OWASP_RULESET_VERSION='${CURRENT_OWASP_RULESET_VERSION}'"
          
          echo "Latest available versions:"
          echo "LATEST_ALPINE_VERSION='${{ env.LATEST_ALPINE_VERSION }}'"
          echo "LATEST_NGINX_VERSION='${{ env.LATEST_NGINX_VERSION }}'"
          echo "LATEST_MODSECURITY_VERSION='${{ env.LATEST_MODSECURITY_VERSION }}'"
          echo "LATEST_OWASP_RULESET_VERSION='${{ env.LATEST_OWASP_RULESET_VERSION }}'"
      
          if [[ "${{ env.LATEST_NGINX_VERSION }}" == "$CURRENT_NGINX_VERSION" ]] && \
               [[ "${{ env.LATEST_MODSECURITY_VERSION }}" == "$CURRENT_MODSECURITY_VERSION" ]] && \
               [[ "${{ env.LATEST_OWASP_RULESET_VERSION }}" == "$CURRENT_OWASP_RULESET_VERSION" ]] && \
               [[ "${{ env.LATEST_GEOIP2_VERSION }}" == "$CURRENT_GEOIP2_VERSION" ]] && \
               [[ "${{ env.LATEST_ALPINE_VERSION }}" == "$CURRENT_ALPINE_VERSION" ]]; then
             echo "No updates found. Exiting."
             echo "needs_build=false" >> $GITHUB_ENV
          else
            echo "New versions found. Proceeding with the build."
            echo "needs_build=true" >> $GITHUB_ENV
          fi          
          
      - name: Extract metadata
        if: env.needs_build == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=nginx-${{ env.LATEST_NGINX_VERSION }}-modsec-${{ env.LATEST_MODSECURITY_VERSION }}-owasp-${{ env.LATEST_OWASP_RULESET_VERSION }}
            type=raw,value=${{ env.BUILD_DATETIME }}
          
      - name: Build and push Docker image
        if: env.needs_build == 'true'
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NGINX_VERSION=${{ env.LATEST_NGINX_VERSION }}
          sbom: true
          no-cache: true

      - name: Pull image for SBOM scan
        if: env.needs_build == 'true'
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_DATETIME }}
        
      - name: Generate SBOM
        if: env.needs_build == 'true'
        continue-on-error: true
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_DATETIME }}
          format: cyclonedx-json
          output-file: 'sbom.cyclonedx.json'          
                 
      - name: Attest SBOM
        if: env.needs_build == 'true'
        uses: actions/attest-sbom@v1
        with:
          subject-name: index.docker.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: 'sbom.cyclonedx.json'
          push-to-registry: true

      - name: Post-Build Vulnerability Scan
        if: env.needs_build == 'true'
        id: post-build-scan
        continue-on-error: true  # Don't fail the entire workflow if scan fails
        uses: docker/scout-action@v1
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_DATETIME }}
          command: cves
          sarif-file: post-build-sarif.output.json
          summary: true
          only-severities: critical,high
          exit-code: false

      - name: Analyze post-build vulnerabilities
        if: env.needs_build == 'true'
        id: analyze-post-build
        continue-on-error: true
        run: |
          if [[ ! -f "post-build-sarif.output.json" ]]; then
            echo "No post-build SARIF file generated"
            echo "post_build_vulns=0" >> $GITHUB_OUTPUT
            echo "scan_status=no_scan" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Count critical and high vulnerabilities in new image
          CRITICAL_COUNT=$(jq '.runs[0].results | map(select(.properties.cvss_severity == "critical")) | length' post-build-sarif.output.json 2>/dev/null || echo "0")
          HIGH_COUNT=$(jq '.runs[0].results | map(select(.properties.cvss_severity == "high")) | length' post-build-sarif.output.json 2>/dev/null || echo "0")
          TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT))

          echo "Post-build scan results:"
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          echo "Total critical/high vulnerabilities: $TOTAL_VULNS"

          echo "post_build_vulns=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT

          if [[ $TOTAL_VULNS -gt 0 ]]; then
            echo "scan_status=vulnerabilities_found" >> $GITHUB_OUTPUT
            echo "⚠️ New image still contains $TOTAL_VULNS critical/high vulnerabilities"
          else
            echo "scan_status=clean" >> $GITHUB_OUTPUT
            echo "✅ New image appears to be free of critical/high vulnerabilities"
          fi

      - name: Upload post-build SARIF to GitHub Security
        if: env.needs_build == 'true' && steps.post-build-scan.outcome == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: post-build-sarif.output.json

      - name: Upload post-build vulnerability report
        if: env.needs_build == 'true' && steps.post-build-scan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: post-build-vulnerability-scan-${{ env.BUILD_DATETIME }}
          path: post-build-sarif.output.json

      - name: Create vulnerability comparison report
        if: env.needs_build == 'true' && steps.analyze-post-build.outcome == 'success'
        run: |
          echo "## 🔍 Post-Build Vulnerability Report" > post-build-report.md
          echo "" >> post-build-report.md
          echo "**Build Date:** ${{ env.BUILD_DATETIME }}" >> post-build-report.md
          echo "**Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BUILD_DATETIME }}" >> post-build-report.md
          echo "**Critical Vulnerabilities:** ${{ steps.analyze-post-build.outputs.critical_count }}" >> post-build-report.md
          echo "**High Vulnerabilities:** ${{ steps.analyze-post-build.outputs.high_count }}" >> post-build-report.md
          echo "**Total Critical/High:** ${{ steps.analyze-post-build.outputs.post_build_vulns }}" >> post-build-report.md
          echo "**Status:** ${{ steps.analyze-post-build.outputs.scan_status }}" >> post-build-report.md
          echo "" >> post-build-report.md
          
          case "${{ steps.analyze-post-build.outputs.scan_status }}" in
            "clean")
              echo "✅ **Result:** New image is clean of critical/high severity vulnerabilities." >> post-build-report.md
              ;;
            "vulnerabilities_found")
              echo "⚠️ **Result:** New image still contains vulnerabilities that may require attention." >> post-build-report.md
              echo "" >> post-build-report.md
              echo "**Recommendation:** Review the detailed SARIF report and consider:" >> post-build-report.md
              echo "- Updating base Alpine image" >> post-build-report.md  
              echo "- Updating component versions (NGINX, ModSecurity, etc.)" >> post-build-report.md
              echo "- Checking for available security patches" >> post-build-report.md
              ;;
            "no_scan")
              echo "ℹ️ **Result:** Vulnerability scan could not be completed." >> post-build-report.md
              ;;
          esac

      - name: Upload vulnerability comparison report
        if: env.needs_build == 'true' && steps.analyze-post-build.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: post-build-vulnerability-report-${{ env.BUILD_DATETIME }}
          path: post-build-report.md
          
      - name: Update versions file and README.md
        if: env.needs_build == 'true' && success() && steps.compare_versions.outcome == 'success'
        run: |
          # Update VERSIONS.txt
          echo "CURRENT_ALPINE_VERSION=${{ env.LATEST_ALPINE_VERSION }}" > VERSIONS.txt
          echo "CURRENT_NGINX_VERSION=${{ env.LATEST_NGINX_VERSION }}" >> VERSIONS.txt
          echo "CURRENT_MODSECURITY_VERSION=${{ env.LATEST_MODSECURITY_VERSION }}" >> VERSIONS.txt
          echo "CURRENT_OWASP_RULESET_VERSION=${{ env.LATEST_OWASP_RULESET_VERSION }}" >> VERSIONS.txt
          echo "BUILD_TIMESTAMP=${{ env.BUILD_DATETIME }}" >> VERSIONS.txt
          
          # Add vulnerability scan info if available
          if [[ "${{ steps.analyze-post-build.outcome }}" == "success" ]]; then
            echo "LAST_VULN_SCAN_DATE=$(date -u '+%Y-%m-%d')" >> VERSIONS.txt
            echo "LAST_VULN_COUNT=${{ steps.analyze-post-build.outputs.post_build_vulns }}" >> VERSIONS.txt
          fi
      
          # Update README.md with the new versions
          sed -i "s/<!--ALPINE_VERSION-->.*<!--ALPINE_VERSION-->/<!--ALPINE_VERSION-->${{ env.LATEST_ALPINE_VERSION }}<!--ALPINE_VERSION-->/g" README.md
          sed -i "s/<!--NGINX_VERSION-->.*<!--NGINX_VERSION-->/<!--NGINX_VERSION-->${{ env.LATEST_NGINX_VERSION }}<!--NGINX_VERSION-->/g" README.md
          sed -i "s/<!--MODSECURITY_VERSION-->.*<!--MODSECURITY_VERSION-->/<!--MODSECURITY_VERSION-->${{ env.LATEST_MODSECURITY_VERSION }}<!--MODSECURITY_VERSION-->/g" README.md
          sed -i "s/<!--OWASP_RULESET_VERSION-->.*<!--OWASP_RULESET_VERSION-->/<!--OWASP_RULESET_VERSION-->${{ env.LATEST_OWASP_RULESET_VERSION }}<!--OWASP_RULESET_VERSION-->/g" README.md
      
          # Configure Git
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          
          git pull origin main

          # Create commit message with vulnerability info
          COMMIT_MSG="Update versions and README.md: NGINX ${{ env.LATEST_NGINX_VERSION }}, ModSecurity ${{ env.LATEST_MODSECURITY_VERSION }}, OWASP CRS ${{ env.LATEST_OWASP_RULESET_VERSION }}"
          
          # Add vulnerability context to commit message for loop prevention
          if [[ "${{ github.event.inputs.force_build }}" == "true" ]]; then
            if [[ "${{ github.workflow }}" == *"vulnerability"* ]] || [[ "${{ github.run_id }}" == *"vulnerability"* ]]; then
              COMMIT_MSG="$COMMIT_MSG [vulnerability-rebuild]"
            else
              COMMIT_MSG="$COMMIT_MSG [manual-rebuild]"
            fi
          fi
          
          if [[ "${{ steps.analyze-post-build.outcome }}" == "success" ]]; then
            VULN_COUNT="${{ steps.analyze-post-build.outputs.post_build_vulns }}"
            if [[ "$VULN_COUNT" == "0" ]]; then
              COMMIT_MSG="$COMMIT_MSG [vuln-scan: clean]"
            else
              COMMIT_MSG="$COMMIT_MSG [vuln-scan: $VULN_COUNT critical/high]"
            fi
          fi

          # Add files and commit the changes
          git add VERSIONS.txt README.md
          git commit -m "$COMMIT_MSG"

          # Push the changes
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Replace Docker Hub Description Versions with Latest Available
        if: env.needs_build == 'true' && success()
        run: |
          # Replace placeholders in docker-hub-description.md with the latest available versions
          sed -i "s/<!--BUILD_DATE-->.*<!--BUILD_DATE-->/<!--BUILD_DATE-->$(date +'%Y-%m-%d')<!--BUILD_DATE-->/g" docker-hub-description.md
          sed -i "s/<!--ALPINE_VERSION-->.*<!--ALPINE_VERSION-->/<!--ALPINE_VERSION-->${{ env.LATEST_ALPINE_VERSION }}<!--ALPINE_VERSION-->/g" docker-hub-description.md
          sed -i "s/<!--NGINX_VERSION-->.*<!--NGINX_VERSION-->/<!--NGINX_VERSION-->${{ env.LATEST_NGINX_VERSION }}<!--NGINX_VERSION-->/g" docker-hub-description.md
          sed -i "s/<!--MODSECURITY_VERSION-->.*<!--MODSECURITY_VERSION-->/<!--MODSECURITY_VERSION-->${{ env.LATEST_MODSECURITY_VERSION }}<!--MODSECURITY_VERSION-->/g" docker-hub-description.md
          sed -i "s/<!--OWASP_RULESET_VERSION-->.*<!--OWASP_RULESET_VERSION-->/<!--OWASP_RULESET_VERSION-->${{ env.LATEST_OWASP_RULESET_VERSION }}<!--OWASP_RULESET_VERSION-->/g" docker-hub-description.md
      
      - name: Update Docker Hub Description
        if: env.needs_build == 'true' && success()
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_RWD_PAT }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: docker-hub-description.md
          
      - name: Skip build and push
        if: env.needs_build == 'false'
        run: echo "Skipping build and push, no updates found."
