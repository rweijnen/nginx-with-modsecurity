name: Build and Push Docker Image

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - README.md      
      
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    env:
      REGISTRY: index.docker.io
      IMAGE_NAME: rweijnen/nginx-with-modsecurity

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Fetch Latest NGINX Version
        id: fetch_nginx_version
        run: |
          LATEST_NGINX_VERSION=$(wget -qO- http://nginx.org/en/download.html | grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "Latest NGINX version: $LATEST_NGINX_VERSION"
          echo "NGINX_VERSION=$LATEST_NGINX_VERSION" >> $GITHUB_ENV
          
      - name: Fetch Latest ModSecurity Version
        id: fetch_modsecurity_version
        run: |
          LATEST_MODSECURITY_VERSION=$(curl -s https://api.github.com/repositories/1320594/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "Latest ModSecurity Release: $LATEST_MODSECURITY_VERSION" 
          echo "MODSECURITY_VERSION=$LATEST_MODSECURITY_VERSION" >> $GITHUB_ENV

      - name: Fetch Latest OWASP Core Rule Set Version
        id: fetch_owasp_ruleset_version
        run: |
          LATEST_OWASP_RULESET_VERSION=$(curl -s https://api.github.com/repos/coreruleset/coreruleset/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
          echo "Latest OWASP Core Ruleset Release: $LATEST_OWASP_RULESET_VERSION"
          echo "OWASP_RULESET_VERSION=$LATEST_OWASP_RULESET_VERSION" >> $GITHUB_ENV
            
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: latest
          
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            NGINX_VERSION=${{ env.NGINX_VERSION }}
          sbom: true
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: 'cyclonedx-json'
          output-file: 'sbom.cyclonedx.json'

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: index.docker.io/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          sbom-path: 'sbom.cyclonedx.json'
          push-to-registry: true

      - name: Update README.md with NGINX version
        run: |
          # Replace NGINX version
          sed -i "s/<!--NGINX_VERSION-->.*<!--NGINX_VERSION-->/<!--NGINX_VERSION-->${{ env.NGINX_VERSION }}<!--NGINX_VERSION-->/g" README.md
   
          # Replace ModSecurity version
          sed -i "s/<!--MODSECURITY_VERSION-->.*<!--MODSECURITY_VERSION-->/<!--MODSECURITY_VERSION-->${{ env.MODSECURITY_VERSION }}<!--MODSECURITY_VERSION-->/g" README.md
          
          # Replace OWASP Core Rule Set version
          sed -i "s/<!--OWASP_RULESET_VERSION-->.*<!--OWASP_RULESET_VERSION-->/<!--OWASP_RULESET_VERSION-->${{ env.OWASP_RULESET_VERSION }}<!--OWASP_RULESET_VERSION-->/g" README.md
          
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          git commit -m "Update README.md with NGINX version ${{ env.NGINX_VERSION }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

